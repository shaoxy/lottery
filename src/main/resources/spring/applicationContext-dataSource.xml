<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <property name="connectionProperties">
            <value>clientEncoding=UTF-8</value>
        </property>
        <!-- Connection Pooling Info -->
        <!-- 连接池启动时创建的初始化连接数量 -->
        <property name="initialSize" value="20"/>
        <!-- 连接池中可同时连接的最大的连接数（默认值为8，调整为20，高峰单机器在20并发左右，自己根据应用场景定） -->
        <property name="maxActive" value="100"/>
        <!-- 连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制（默认为8个，maxIdle不能设置
太小，因为假如在高负载的情况下，连接的打开时间比关闭的时间快，会引起连接池中idle的个数 上升超过maxIdle，而造成频繁的连接销毁>和创建，类似于jvm参数中的Xmx设置) -->
        <!-- 
        <property name="maxIdle" value="50" />
         -->
        <!-- 连接池中最小的空闲的连接数，低于这个数量会被创建新的连接（默认为0，调整为5，该参数越接近maxIdle，性能越>好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大，因为在机器很空闲的时候，也会创建低于minidle个数的连接，类似于jvm>参数中的Xmn设置） -->
        <property name="minIdle" value="5"/>
        <!--最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无>限等待（默认为无限，调整为60000ms，避免因线程池不够用，而导致请求被无限制挂起） -->
        <property name="maxWait" value="6000"/>
        <!-- 开启池的prepared（默认是false，未调整，经过测试，开启后的性能没有关闭的好。） -->
        <!-- druid数据库连接池对此属性支持很好，支持orcale以及mysql5.5以上 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="100"/>

        <property name="defaultAutoCommit" value="false"/>
        <!-- 是否在自动回收超时连接的时候打印连接的超时错误 -->
        <property name="logAbandoned" value="false"/>
        <!--超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收（默认为false，调整为true) -->
        <property name="removeAbandoned" value="true"/>
        <!--超过时间限制，回收没有用(废弃)的连接（默认为 300秒，调整为180） -->
        <property name="removeAbandonedTimeout" value="180"/>

        <!-- Validate配置代码 -->
        <!-- GenericObjectPool中针对pool管理，起了一个Evict的TimerTask定时线程进行控制(可通过设置参数timeBetweenEvictionRunsMillis>0),定时对线程池中的链接进行validateObject校验，对无效的链接进行关闭后，会调用ensureMinIdle，适当建立链接保证最小的minIdle连接数。 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 对拿到的connection进行validateObject校验 -->
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 代表检查的sql -->
        <property name="validationQuery" value="SELECT now()"/>
        <!-- 代表在执行检查时，通过statement设置，statement.setQueryTimeout(validationQueryTimeout) -->
        <property name="validationQueryTimeout" value="1"/>
        <!-- 设置的Evict线程的时间，单位ms，大于0才会开启evict检查线程 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>
        <!-- 代表每次检查链接的数量，建议设置和maxActive一样大，这样每次可以有效检查所有的链接. -->
        <!-- 
        <property name="numTestsPerEvictionRun" value="50" />
         -->
        <!-- 关闭打印get/close not same thread日志 -->
        <property name="logDifferentThread" value="false"/>

        <property name="filters" value="stat,wall"/>
        <property name="proxyFilters">
            <list>
                <ref bean="slf4j-filter"/>
            </list>
        </property>
    </bean>

    <bean id="slf4j-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="statementExecutableSqlLogEnable" value="true"/>
    </bean>

    <!-- enable the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- Mybatis's sqlSessionFactory config1 -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean"><!-- 扩展SqlSessionFactoryBean，实现mybatis配置文件修改热部署。如不想热部署可将Hot删除 -->
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
    </bean>

    <!-- scan mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ai.lottery.business.dao.persistence"/>
    </bean>


    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.ai.lottery.business.service.impl.*</value>
                <value>com.ai.lottery.business.dao.service.*</value>
                <value>com.ai.lottery.admin.service.impl.*</value>
            </list>
        </property>
    </bean>

    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="get*" read-only="false" propagation="REQUIRED" rollback-for="Throwable"/>
            <tx:method name="insert*" read-only="false" propagation="REQUIRED" rollback-for="Throwable"/>
            <tx:method name="update*" read-only="false" propagation="REQUIRED" rollback-for="Throwable"/>
            <tx:method name="delete*" read-only="false" propagation="REQUIRED" rollback-for="Throwable"/>
            <tx:method name="save*" read-only="false" propagation="REQUIRED" rollback-for="Throwable"/>
            <tx:method name="login*" read-only="false" propagation="REQUIRED" rollback-for="Throwable"/>
            <tx:method name="register*" read-only="false" propagation="REQUIRED" rollback-for="Throwable"/>
            <tx:method name="modify*" read-only="false" propagation="REQUIRED" rollback-for="Throwable"/>
            <tx:method name="*" timeout="10"/>
        </tx:attributes>
    </tx:advice>
    <!-- 需要事务拦截的路径 -->

    <aop:config>
        <aop:pointcut id="serviceOperation"
                      expression="execution(* com.ai.lottery.business.service..*.*(..)) or execution(* com.ai.lottery.core.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
    </aop:config>

    <!-- nutz.dao配置 -->
    <bean id="dao" class="org.nutz.dao.impl.NutDao">
        <constructor-arg ref="dataSource" index="0"/>
        <property name="runner" ref="springDaoRunner"/>
    </bean>
</beans>